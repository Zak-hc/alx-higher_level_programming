def matrix_divided(matrix, div):
    """
    Divise chaque élément d'une matrice par un diviseur donné.

    Arguments:
    - matrix (list): La matrice d'entrée sous forme de liste de listes.
    - div (int or float): Le diviseur.

    Returns:
    - list: Une nouvelle matrice contenant les résultats de la division.

    Raises:
    - TypeError: Si la matrice n'est pas une matrice valide ou si le diviseur n'est pas un nombre.

    """

    # Vérification de la validité de la matrice
    if matrix is None or not isinstance(matrix, list):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    # Vérification de la validité du diviseur
    if div is None or not isinstance(div, (int, float)):
        raise TypeError("div must be a number")

    # Gestion du cas d'une matrice vide
    if len(matrix) == 0:
        return []

    # Vérification de la validité de chaque élément de la matrice
    row_length = len(matrix[0])
    for row in matrix:
        if not isinstance(row, list):
            raise TypeError("matrix must be a matrix (list of lists) of integers/floats")
        if len(row) != row_length:
            raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

        for element in row:
            if not isinstance(element, (int, float)):
                raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    # Division de chaque élément de la matrice par le diviseur et arrondi à 2 décimales
    return [[round(element / div, 2) for element in row] for row in matrix]


